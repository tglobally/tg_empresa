O:8:"stdClass":4:{s:9:"registros";a:1:{i:0;a:2:{s:15:"org_sucursal_id";s:1:"1";s:31:"org_sucursal_descripcion_select";s:1:"1";}}s:11:"n_registros";i:1;s:3:"sql";s:1107:"SELECT org_sucursal.id AS org_sucursal_id, org_sucursal.descripcion_select AS org_sucursal_descripcion_select   FROM org_sucursal AS org_sucursal LEFT JOIN org_empresa AS org_empresa ON org_empresa.id = org_sucursal.org_empresa_id LEFT JOIN dp_calle_pertenece AS dp_calle_pertenece ON dp_calle_pertenece.id = org_sucursal.dp_calle_pertenece_id LEFT JOIN dp_calle AS dp_calle ON dp_calle.id = dp_calle_pertenece.dp_calle_id LEFT JOIN dp_colonia_postal AS dp_colonia_postal ON dp_colonia_postal.id = dp_calle_pertenece.dp_colonia_postal_id LEFT JOIN dp_colonia AS dp_colonia ON dp_colonia.id = dp_colonia_postal.dp_colonia_id LEFT JOIN dp_cp AS dp_cp ON dp_cp.id = dp_colonia_postal.dp_cp_id LEFT JOIN dp_municipio AS dp_municipio ON dp_municipio.id = dp_cp.dp_municipio_id LEFT JOIN dp_estado AS dp_estado ON dp_estado.id = dp_municipio.dp_estado_id LEFT JOIN dp_pais AS dp_pais ON dp_pais.id = dp_estado.dp_pais_id LEFT JOIN org_tipo_sucursal AS org_tipo_sucursal ON org_tipo_sucursal.id = org_sucursal.org_tipo_sucursal_id WHERE   ( (org_sucursal.id = '1'  AND  org_sucursal.status = 'activo'))            ";s:13:"registros_obj";a:1:{i:0;O:8:"stdClass":2:{s:15:"org_sucursal_id";s:1:"1";s:31:"org_sucursal_descripcion_select";s:1:"1";}}}